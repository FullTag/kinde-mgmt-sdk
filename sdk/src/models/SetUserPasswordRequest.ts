/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SetUserPasswordRequest
 */
export interface SetUserPasswordRequest {
    /**
     * The hashed password.
     * @type {string}
     * @memberof SetUserPasswordRequest
     */
    hashedPassword: string;
    /**
     * The hashing method or algorithm used to encrypt the userâ€™s password. Default is bcrypt.
     * @type {string}
     * @memberof SetUserPasswordRequest
     */
    hashingMethod?: SetUserPasswordRequestHashingMethodEnum;
    /**
     * Extra characters added to passwords to make them stronger. Not required for bcrypt.
     * @type {string}
     * @memberof SetUserPasswordRequest
     */
    salt?: string;
    /**
     * Position of salt in password string. Not required for bcrypt.
     * @type {string}
     * @memberof SetUserPasswordRequest
     */
    saltPosition?: SetUserPasswordRequestSaltPositionEnum;
    /**
     * The user will be prompted to set a new password after entering this one.
     * @type {boolean}
     * @memberof SetUserPasswordRequest
     */
    isTemporaryPassword?: boolean;
}


/**
 * @export
 */
export const SetUserPasswordRequestHashingMethodEnum = {
    Bcrypt: 'bcrypt',
    Crypt: 'crypt',
    Md5: 'md5',
    Wordpress: 'wordpress'
} as const;
export type SetUserPasswordRequestHashingMethodEnum = typeof SetUserPasswordRequestHashingMethodEnum[keyof typeof SetUserPasswordRequestHashingMethodEnum];

/**
 * @export
 */
export const SetUserPasswordRequestSaltPositionEnum = {
    Prefix: 'prefix',
    Suffix: 'suffix'
} as const;
export type SetUserPasswordRequestSaltPositionEnum = typeof SetUserPasswordRequestSaltPositionEnum[keyof typeof SetUserPasswordRequestSaltPositionEnum];


/**
 * Check if a given object implements the SetUserPasswordRequest interface.
 */
export function instanceOfSetUserPasswordRequest(value: object): value is SetUserPasswordRequest {
    if (!('hashedPassword' in value) || value['hashedPassword'] === undefined) return false;
    return true;
}

export function SetUserPasswordRequestFromJSON(json: any): SetUserPasswordRequest {
    return SetUserPasswordRequestFromJSONTyped(json, false);
}

export function SetUserPasswordRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SetUserPasswordRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'hashedPassword': json['hashed_password'],
        'hashingMethod': json['hashing_method'] == null ? undefined : json['hashing_method'],
        'salt': json['salt'] == null ? undefined : json['salt'],
        'saltPosition': json['salt_position'] == null ? undefined : json['salt_position'],
        'isTemporaryPassword': json['is_temporary_password'] == null ? undefined : json['is_temporary_password'],
    };
}

  export function SetUserPasswordRequestToJSON(json: any): SetUserPasswordRequest {
      return SetUserPasswordRequestToJSONTyped(json, false);
  }

  export function SetUserPasswordRequestToJSONTyped(value?: SetUserPasswordRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'hashed_password': value['hashedPassword'],
        'hashing_method': value['hashingMethod'],
        'salt': value['salt'],
        'salt_position': value['saltPosition'],
        'is_temporary_password': value['isTemporaryPassword'],
    };
}

