/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateOrganizationRequest
 */
export interface CreateOrganizationRequest {
    /**
     * The organization's name.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    name: string;
    /**
     * The organization's feature flag settings.
     * @type {{ [key: string]: string; }}
     * @memberof CreateOrganizationRequest
     */
    featureFlags?: { [key: string]: string; };
    /**
     * The organization's external identifier - commonly used when migrating from or mapping to other systems.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    externalId?: string;
    /**
     * The organization's brand settings - background color.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    backgroundColor?: string;
    /**
     * The organization's brand settings - button color.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    buttonColor?: string;
    /**
     * The organization's brand settings - button text color.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    buttonTextColor?: string;
    /**
     * The organization's brand settings - link color.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    linkColor?: string;
    /**
     * The organization's brand settings - dark mode background color.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    backgroundColorDark?: string;
    /**
     * The organization's brand settings - dark mode button color.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    buttonColorDark?: string;
    /**
     * The organization's brand settings - dark mode button text color.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    buttonTextColorDark?: string;
    /**
     * The organization's brand settings - dark mode link color.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    linkColorDark?: string;
    /**
     * The organization's brand settings - theme/mode 'light' | 'dark' | 'user_preference'.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    themeCode?: string;
    /**
     * A unique handle for the organization - can be used for dynamic callback urls.
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    handle?: string;
    /**
     * If users become members of this organization when the org code is supplied during authentication.
     * @type {boolean}
     * @memberof CreateOrganizationRequest
     */
    isAllowRegistrations?: boolean;
    /**
     * Enable custom auth connections for this organization.
     * @type {boolean}
     * @memberof CreateOrganizationRequest
     */
    isCustomAuthConnectionsEnabled?: boolean;
}


/**
 * @export
 */
export const CreateOrganizationRequestFeatureFlagsEnum = {
    Str: 'str',
    Int: 'int',
    Bool: 'bool'
} as const;
export type CreateOrganizationRequestFeatureFlagsEnum = typeof CreateOrganizationRequestFeatureFlagsEnum[keyof typeof CreateOrganizationRequestFeatureFlagsEnum];


/**
 * Check if a given object implements the CreateOrganizationRequest interface.
 */
export function instanceOfCreateOrganizationRequest(value: object): value is CreateOrganizationRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function CreateOrganizationRequestFromJSON(json: any): CreateOrganizationRequest {
    return CreateOrganizationRequestFromJSONTyped(json, false);
}

export function CreateOrganizationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrganizationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'featureFlags': json['feature_flags'] == null ? undefined : json['feature_flags'],
        'externalId': json['external_id'] == null ? undefined : json['external_id'],
        'backgroundColor': json['background_color'] == null ? undefined : json['background_color'],
        'buttonColor': json['button_color'] == null ? undefined : json['button_color'],
        'buttonTextColor': json['button_text_color'] == null ? undefined : json['button_text_color'],
        'linkColor': json['link_color'] == null ? undefined : json['link_color'],
        'backgroundColorDark': json['background_color_dark'] == null ? undefined : json['background_color_dark'],
        'buttonColorDark': json['button_color_dark'] == null ? undefined : json['button_color_dark'],
        'buttonTextColorDark': json['button_text_color_dark'] == null ? undefined : json['button_text_color_dark'],
        'linkColorDark': json['link_color_dark'] == null ? undefined : json['link_color_dark'],
        'themeCode': json['theme_code'] == null ? undefined : json['theme_code'],
        'handle': json['handle'] == null ? undefined : json['handle'],
        'isAllowRegistrations': json['is_allow_registrations'] == null ? undefined : json['is_allow_registrations'],
        'isCustomAuthConnectionsEnabled': json['is_custom_auth_connections_enabled'] == null ? undefined : json['is_custom_auth_connections_enabled'],
    };
}

  export function CreateOrganizationRequestToJSON(json: any): CreateOrganizationRequest {
      return CreateOrganizationRequestToJSONTyped(json, false);
  }

  export function CreateOrganizationRequestToJSONTyped(value?: CreateOrganizationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'feature_flags': value['featureFlags'],
        'external_id': value['externalId'],
        'background_color': value['backgroundColor'],
        'button_color': value['buttonColor'],
        'button_text_color': value['buttonTextColor'],
        'link_color': value['linkColor'],
        'background_color_dark': value['backgroundColorDark'],
        'button_color_dark': value['buttonColorDark'],
        'button_text_color_dark': value['buttonTextColorDark'],
        'link_color_dark': value['linkColorDark'],
        'theme_code': value['themeCode'],
        'handle': value['handle'],
        'is_allow_registrations': value['isAllowRegistrations'],
        'is_custom_auth_connections_enabled': value['isCustomAuthConnectionsEnabled'],
    };
}

