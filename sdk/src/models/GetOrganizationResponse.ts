/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GetOrganizationResponseLinkColor } from './GetOrganizationResponseLinkColor';
import {
    GetOrganizationResponseLinkColorFromJSON,
    GetOrganizationResponseLinkColorFromJSONTyped,
    GetOrganizationResponseLinkColorToJSON,
} from './GetOrganizationResponseLinkColor';
import type { GetOrganizationResponseBackgroundColor } from './GetOrganizationResponseBackgroundColor';
import {
    GetOrganizationResponseBackgroundColorFromJSON,
    GetOrganizationResponseBackgroundColorFromJSONTyped,
    GetOrganizationResponseBackgroundColorToJSON,
} from './GetOrganizationResponseBackgroundColor';

/**
 * 
 * @export
 * @interface GetOrganizationResponse
 */
export interface GetOrganizationResponse {
    /**
     * The unique identifier for the organization.
     * @type {string}
     * @memberof GetOrganizationResponse
     */
    code?: string;
    /**
     * The organization's name.
     * @type {string}
     * @memberof GetOrganizationResponse
     */
    name?: string;
    /**
     * A unique handle for the organization - can be used for dynamic callback urls.
     * @type {string}
     * @memberof GetOrganizationResponse
     */
    handle?: string | null;
    /**
     * Whether the organization is the default organization.
     * @type {boolean}
     * @memberof GetOrganizationResponse
     */
    isDefault?: boolean;
    /**
     * The organization's external identifier - commonly used when migrating from or mapping to other systems.
     * @type {string}
     * @memberof GetOrganizationResponse
     */
    externalId?: string | null;
    /**
     * If users become members of this organization when the org code is supplied during authentication.
     * @type {boolean}
     * @memberof GetOrganizationResponse
     */
    isAutoMembershipEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetOrganizationResponse
     * @deprecated
     */
    logo?: string | null;
    /**
     * 
     * @type {GetOrganizationResponseLinkColor}
     * @memberof GetOrganizationResponse
     */
    linkColor?: GetOrganizationResponseLinkColor | null;
    /**
     * 
     * @type {GetOrganizationResponseBackgroundColor}
     * @memberof GetOrganizationResponse
     */
    backgroundColor?: GetOrganizationResponseBackgroundColor | null;
    /**
     * 
     * @type {GetOrganizationResponseLinkColor}
     * @memberof GetOrganizationResponse
     */
    buttonColor?: GetOrganizationResponseLinkColor | null;
    /**
     * 
     * @type {GetOrganizationResponseBackgroundColor}
     * @memberof GetOrganizationResponse
     */
    buttonTextColor?: GetOrganizationResponseBackgroundColor | null;
    /**
     * Deprecated - Use 'is_auto_membership_enabled' instead
     * @type {boolean}
     * @memberof GetOrganizationResponse
     * @deprecated
     */
    isAllowRegistrations?: boolean | null;
}

/**
 * Check if a given object implements the GetOrganizationResponse interface.
 */
export function instanceOfGetOrganizationResponse(value: object): value is GetOrganizationResponse {
    return true;
}

export function GetOrganizationResponseFromJSON(json: any): GetOrganizationResponse {
    return GetOrganizationResponseFromJSONTyped(json, false);
}

export function GetOrganizationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetOrganizationResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'code': json['code'] == null ? undefined : json['code'],
        'name': json['name'] == null ? undefined : json['name'],
        'handle': json['handle'] == null ? undefined : json['handle'],
        'isDefault': json['is_default'] == null ? undefined : json['is_default'],
        'externalId': json['external_id'] == null ? undefined : json['external_id'],
        'isAutoMembershipEnabled': json['is_auto_membership_enabled'] == null ? undefined : json['is_auto_membership_enabled'],
        'logo': json['logo'] == null ? undefined : json['logo'],
        'linkColor': json['link_color'] == null ? undefined : GetOrganizationResponseLinkColorFromJSON(json['link_color']),
        'backgroundColor': json['background_color'] == null ? undefined : GetOrganizationResponseBackgroundColorFromJSON(json['background_color']),
        'buttonColor': json['button_color'] == null ? undefined : GetOrganizationResponseLinkColorFromJSON(json['button_color']),
        'buttonTextColor': json['button_text_color'] == null ? undefined : GetOrganizationResponseBackgroundColorFromJSON(json['button_text_color']),
        'isAllowRegistrations': json['is_allow_registrations'] == null ? undefined : json['is_allow_registrations'],
    };
}

export function GetOrganizationResponseToJSON(value?: GetOrganizationResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'code': value['code'],
        'name': value['name'],
        'handle': value['handle'],
        'is_default': value['isDefault'],
        'external_id': value['externalId'],
        'is_auto_membership_enabled': value['isAutoMembershipEnabled'],
        'logo': value['logo'],
        'link_color': GetOrganizationResponseLinkColorToJSON(value['linkColor']),
        'background_color': GetOrganizationResponseBackgroundColorToJSON(value['backgroundColor']),
        'button_color': GetOrganizationResponseLinkColorToJSON(value['buttonColor']),
        'button_text_color': GetOrganizationResponseBackgroundColorToJSON(value['buttonTextColor']),
        'is_allow_registrations': value['isAllowRegistrations'],
    };
}

