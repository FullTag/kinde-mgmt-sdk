/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface GetBusinessRequest {
    code: string;
    name: string;
    email: string;
    phone?: string | null;
    industry?: string;
    timezone?: string;
    privacyUrl?: string | null;
    termsUrl?: string | null;
}

export interface UpdateBusinessRequest {
    businessName: string;
    primaryEmail: string;
    primaryPhone?: string | null;
    industryKey?: string;
    timezoneId?: string;
    privacyUrl?: string | null;
    termsUrl?: string | null;
    isShowKindeBranding?: string | null;
    isClickWrap?: boolean | null;
    partnerCode?: string | null;
}

/**
 * 
 */
export class BusinessApi extends runtime.BaseAPI {

    /**
     * Get your business details.
     * List business details
     */
    async getBusinessRaw(requestParameters: GetBusinessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling getBusiness().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getBusiness().'
            );
        }

        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling getBusiness().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['phone'] != null) {
            queryParameters['phone'] = requestParameters['phone'];
        }

        if (requestParameters['industry'] != null) {
            queryParameters['industry'] = requestParameters['industry'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['privacyUrl'] != null) {
            queryParameters['privacy_url'] = requestParameters['privacyUrl'];
        }

        if (requestParameters['termsUrl'] != null) {
            queryParameters['terms_url'] = requestParameters['termsUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/business`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Get your business details.
     * List business details
     */
    async getBusiness(requestParameters: GetBusinessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.getBusinessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update business details.
     * Update business details
     */
    async updateBusinessRaw(requestParameters: UpdateBusinessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['businessName'] == null) {
            throw new runtime.RequiredError(
                'businessName',
                'Required parameter "businessName" was null or undefined when calling updateBusiness().'
            );
        }

        if (requestParameters['primaryEmail'] == null) {
            throw new runtime.RequiredError(
                'primaryEmail',
                'Required parameter "primaryEmail" was null or undefined when calling updateBusiness().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['businessName'] != null) {
            queryParameters['business_name'] = requestParameters['businessName'];
        }

        if (requestParameters['primaryEmail'] != null) {
            queryParameters['primary_email'] = requestParameters['primaryEmail'];
        }

        if (requestParameters['primaryPhone'] != null) {
            queryParameters['primary_phone'] = requestParameters['primaryPhone'];
        }

        if (requestParameters['industryKey'] != null) {
            queryParameters['industry_key'] = requestParameters['industryKey'];
        }

        if (requestParameters['timezoneId'] != null) {
            queryParameters['timezone_id'] = requestParameters['timezoneId'];
        }

        if (requestParameters['privacyUrl'] != null) {
            queryParameters['privacy_url'] = requestParameters['privacyUrl'];
        }

        if (requestParameters['termsUrl'] != null) {
            queryParameters['terms_url'] = requestParameters['termsUrl'];
        }

        if (requestParameters['isShowKindeBranding'] != null) {
            queryParameters['is_show_kinde_branding'] = requestParameters['isShowKindeBranding'];
        }

        if (requestParameters['isClickWrap'] != null) {
            queryParameters['is_click_wrap'] = requestParameters['isClickWrap'];
        }

        if (requestParameters['partnerCode'] != null) {
            queryParameters['partner_code'] = requestParameters['partnerCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/business`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update business details.
     * Update business details
     */
    async updateBusiness(requestParameters: UpdateBusinessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.updateBusinessRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
