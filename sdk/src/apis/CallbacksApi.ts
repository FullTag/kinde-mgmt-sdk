/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  LogoutRedirectUrls,
  RedirectCallbackUrls,
  ReplaceLogoutRedirectURLsRequest,
  ReplaceRedirectCallbackURLsRequest,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LogoutRedirectUrlsFromJSON,
    LogoutRedirectUrlsToJSON,
    RedirectCallbackUrlsFromJSON,
    RedirectCallbackUrlsToJSON,
    ReplaceLogoutRedirectURLsRequestFromJSON,
    ReplaceLogoutRedirectURLsRequestToJSON,
    ReplaceRedirectCallbackURLsRequestFromJSON,
    ReplaceRedirectCallbackURLsRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface AddLogoutRedirectURLsRequest {
    appId: string;
    replaceLogoutRedirectURLsRequest: ReplaceLogoutRedirectURLsRequest;
}

export interface AddRedirectCallbackURLsRequest {
    appId: string;
    replaceRedirectCallbackURLsRequest: ReplaceRedirectCallbackURLsRequest;
}

export interface DeleteCallbackURLsRequest {
    appId: string;
    urls: string;
}

export interface DeleteLogoutURLsRequest {
    appId: string;
    urls: string;
}

export interface GetCallbackURLsRequest {
    appId: string;
}

export interface GetLogoutURLsRequest {
    appId: string;
}

export interface ReplaceLogoutRedirectURLsOperationRequest {
    appId: string;
    replaceLogoutRedirectURLsRequest: ReplaceLogoutRedirectURLsRequest;
}

export interface ReplaceRedirectCallbackURLsOperationRequest {
    appId: string;
    replaceRedirectCallbackURLsRequest: ReplaceRedirectCallbackURLsRequest;
}

/**
 * 
 */
export class CallbacksApi extends runtime.BaseAPI {

    /**
     * Add additional logout redirect URLs. 
     * Add Logout Redirect URLs
     */
    async addLogoutRedirectURLsRaw(requestParameters: AddLogoutRedirectURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling addLogoutRedirectURLs().'
            );
        }

        if (requestParameters['replaceLogoutRedirectURLsRequest'] == null) {
            throw new runtime.RequiredError(
                'replaceLogoutRedirectURLsRequest',
                'Required parameter "replaceLogoutRedirectURLsRequest" was null or undefined when calling addLogoutRedirectURLs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["create:application_logout_uris"]);
        }

        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_logout_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReplaceLogoutRedirectURLsRequestToJSON(requestParameters['replaceLogoutRedirectURLsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Add additional logout redirect URLs. 
     * Add Logout Redirect URLs
     */
    async addLogoutRedirectURLs(requestParameters: AddLogoutRedirectURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.addLogoutRedirectURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add additional redirect callback URLs. 
     * Add Redirect Callback URLs
     */
    async addRedirectCallbackURLsRaw(requestParameters: AddRedirectCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling addRedirectCallbackURLs().'
            );
        }

        if (requestParameters['replaceRedirectCallbackURLsRequest'] == null) {
            throw new runtime.RequiredError(
                'replaceRedirectCallbackURLsRequest',
                'Required parameter "replaceRedirectCallbackURLsRequest" was null or undefined when calling addRedirectCallbackURLs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["create:application_redirect_uris"]);
        }

        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_redirect_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReplaceRedirectCallbackURLsRequestToJSON(requestParameters['replaceRedirectCallbackURLsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Add additional redirect callback URLs. 
     * Add Redirect Callback URLs
     */
    async addRedirectCallbackURLs(requestParameters: AddRedirectCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.addRedirectCallbackURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete callback URLs. 
     * Delete Callback URLs
     */
    async deleteCallbackURLsRaw(requestParameters: DeleteCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling deleteCallbackURLs().'
            );
        }

        if (requestParameters['urls'] == null) {
            throw new runtime.RequiredError(
                'urls',
                'Required parameter "urls" was null or undefined when calling deleteCallbackURLs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['urls'] != null) {
            queryParameters['urls'] = requestParameters['urls'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["delete:application_redirect_uris"]);
        }

        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_redirect_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete callback URLs. 
     * Delete Callback URLs
     */
    async deleteCallbackURLs(requestParameters: DeleteCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteCallbackURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete logout URLs. 
     * Delete Logout URLs
     */
    async deleteLogoutURLsRaw(requestParameters: DeleteLogoutURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling deleteLogoutURLs().'
            );
        }

        if (requestParameters['urls'] == null) {
            throw new runtime.RequiredError(
                'urls',
                'Required parameter "urls" was null or undefined when calling deleteLogoutURLs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['urls'] != null) {
            queryParameters['urls'] = requestParameters['urls'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["delete:application_logout_uris"]);
        }

        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_logout_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete logout URLs. 
     * Delete Logout URLs
     */
    async deleteLogoutURLs(requestParameters: DeleteLogoutURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteLogoutURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an application\'s redirect callback URLs. 
     * List Callback URLs
     */
    async getCallbackURLsRaw(requestParameters: GetCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RedirectCallbackUrls>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getCallbackURLs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["read:applications_redirect_uris"]);
        }

        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_redirect_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedirectCallbackUrlsFromJSON(jsonValue));
    }

    /**
     * Returns an application\'s redirect callback URLs. 
     * List Callback URLs
     */
    async getCallbackURLs(requestParameters: GetCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RedirectCallbackUrls> {
        const response = await this.getCallbackURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an application\'s logout redirect URLs. 
     * List Logout URLs
     */
    async getLogoutURLsRaw(requestParameters: GetLogoutURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogoutRedirectUrls>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getLogoutURLs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["read:application_logout_uris"]);
        }

        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_logout_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogoutRedirectUrlsFromJSON(jsonValue));
    }

    /**
     * Returns an application\'s logout redirect URLs. 
     * List Logout URLs
     */
    async getLogoutURLs(requestParameters: GetLogoutURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogoutRedirectUrls> {
        const response = await this.getLogoutURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replace all logout redirect URLs. 
     * Replace Logout Redirect URLs
     */
    async replaceLogoutRedirectURLsRaw(requestParameters: ReplaceLogoutRedirectURLsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling replaceLogoutRedirectURLs().'
            );
        }

        if (requestParameters['replaceLogoutRedirectURLsRequest'] == null) {
            throw new runtime.RequiredError(
                'replaceLogoutRedirectURLsRequest',
                'Required parameter "replaceLogoutRedirectURLsRequest" was null or undefined when calling replaceLogoutRedirectURLs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["update:application_logout_uris"]);
        }

        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_logout_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReplaceLogoutRedirectURLsRequestToJSON(requestParameters['replaceLogoutRedirectURLsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Replace all logout redirect URLs. 
     * Replace Logout Redirect URLs
     */
    async replaceLogoutRedirectURLs(requestParameters: ReplaceLogoutRedirectURLsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.replaceLogoutRedirectURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replace all redirect callback URLs. 
     * Replace Redirect Callback URLs
     */
    async replaceRedirectCallbackURLsRaw(requestParameters: ReplaceRedirectCallbackURLsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling replaceRedirectCallbackURLs().'
            );
        }

        if (requestParameters['replaceRedirectCallbackURLsRequest'] == null) {
            throw new runtime.RequiredError(
                'replaceRedirectCallbackURLsRequest',
                'Required parameter "replaceRedirectCallbackURLsRequest" was null or undefined when calling replaceRedirectCallbackURLs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["update:application_redirect_uris"]);
        }

        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_redirect_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReplaceRedirectCallbackURLsRequestToJSON(requestParameters['replaceRedirectCallbackURLsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Replace all redirect callback URLs. 
     * Replace Redirect Callback URLs
     */
    async replaceRedirectCallbackURLs(requestParameters: ReplaceRedirectCallbackURLsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.replaceRedirectCallbackURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
