/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddAPIsRequest,
  AuthorizeAppApiResponse,
  CreateApisResponse,
  DeleteApiResponse,
  ErrorResponse,
  GetApiResponse,
  GetApisResponse,
  UpdateAPIApplicationsRequest,
} from '../models/index';
import {
    AddAPIsRequestFromJSON,
    AddAPIsRequestToJSON,
    AuthorizeAppApiResponseFromJSON,
    AuthorizeAppApiResponseToJSON,
    CreateApisResponseFromJSON,
    CreateApisResponseToJSON,
    DeleteApiResponseFromJSON,
    DeleteApiResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetApiResponseFromJSON,
    GetApiResponseToJSON,
    GetApisResponseFromJSON,
    GetApisResponseToJSON,
    UpdateAPIApplicationsRequestFromJSON,
    UpdateAPIApplicationsRequestToJSON,
} from '../models/index';

export interface AddAPIsOperationRequest {
    addAPIsRequest: AddAPIsRequest;
}

export interface DeleteAPIRequest {
    apiId: string;
}

export interface GetAPIRequest {
    apiId: string;
}

export interface UpdateAPIApplicationsOperationRequest {
    apiId: string;
    updateAPIApplicationsRequest: UpdateAPIApplicationsRequest;
}

/**
 * 
 */
export class APIsApi extends runtime.BaseAPI {

    /**
     * Register a new API. For more information read [Register and manage APIs](https://docs.kinde.com/developer-tools/your-apis/register-manage-apis/).
     * Create API
     */
    async addAPIsRaw(requestParameters: AddAPIsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApisResponse>> {
        if (requestParameters['addAPIsRequest'] == null) {
            throw new runtime.RequiredError(
                'addAPIsRequest',
                'Required parameter "addAPIsRequest" was null or undefined when calling addAPIs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["create:apis"]);
        }

        const response = await this.request({
            path: `/api/v1/apis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAPIsRequestToJSON(requestParameters['addAPIsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateApisResponseFromJSON(jsonValue));
    }

    /**
     * Register a new API. For more information read [Register and manage APIs](https://docs.kinde.com/developer-tools/your-apis/register-manage-apis/).
     * Create API
     */
    async addAPIs(requestParameters: AddAPIsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApisResponse> {
        const response = await this.addAPIsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an API you previously created.
     * Delete API
     */
    async deleteAPIRaw(requestParameters: DeleteAPIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteApiResponse>> {
        if (requestParameters['apiId'] == null) {
            throw new runtime.RequiredError(
                'apiId',
                'Required parameter "apiId" was null or undefined when calling deleteAPI().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["delete:apis"]);
        }

        const response = await this.request({
            path: `/api/v1/apis/{api_id}`.replace(`{${"api_id"}}`, encodeURIComponent(String(requestParameters['apiId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteApiResponseFromJSON(jsonValue));
    }

    /**
     * Delete an API you previously created.
     * Delete API
     */
    async deleteAPI(requestParameters: DeleteAPIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteApiResponse> {
        const response = await this.deleteAPIRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve API details by ID.
     * Get API
     */
    async getAPIRaw(requestParameters: GetAPIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApiResponse>> {
        if (requestParameters['apiId'] == null) {
            throw new runtime.RequiredError(
                'apiId',
                'Required parameter "apiId" was null or undefined when calling getAPI().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["read:apis"]);
        }

        const response = await this.request({
            path: `/api/v1/apis/{api_id}`.replace(`{${"api_id"}}`, encodeURIComponent(String(requestParameters['apiId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApiResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve API details by ID.
     * Get API
     */
    async getAPI(requestParameters: GetAPIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApiResponse> {
        const response = await this.getAPIRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of your APIs. The APIs are returned sorted by name.
     * Get APIs
     */
    async getAPIsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApisResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["read:apis"]);
        }

        const response = await this.request({
            path: `/api/v1/apis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApisResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of your APIs. The APIs are returned sorted by name.
     * Get APIs
     */
    async getAPIs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApisResponse> {
        const response = await this.getAPIsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Authorize applications to be allowed to request access tokens for an API
     * Authorize API applications
     */
    async updateAPIApplicationsRaw(requestParameters: UpdateAPIApplicationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizeAppApiResponse>> {
        if (requestParameters['apiId'] == null) {
            throw new runtime.RequiredError(
                'apiId',
                'Required parameter "apiId" was null or undefined when calling updateAPIApplications().'
            );
        }

        if (requestParameters['updateAPIApplicationsRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAPIApplicationsRequest',
                'Required parameter "updateAPIApplicationsRequest" was null or undefined when calling updateAPIApplications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ManagementAPI", ["update:apis"]);
        }

        const response = await this.request({
            path: `/api/v1/apis/{api_id}/applications`.replace(`{${"api_id"}}`, encodeURIComponent(String(requestParameters['apiId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAPIApplicationsRequestToJSON(requestParameters['updateAPIApplicationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizeAppApiResponseFromJSON(jsonValue));
    }

    /**
     * Authorize applications to be allowed to request access tokens for an API
     * Authorize API applications
     */
    async updateAPIApplications(requestParameters: UpdateAPIApplicationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizeAppApiResponse> {
        const response = await this.updateAPIApplicationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
