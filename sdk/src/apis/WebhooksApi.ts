/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateWebHookRequest,
  CreateWebhookResponse,
  DeleteWebhookResponse,
  ErrorResponse,
  GetEventResponse,
  GetEventTypesResponse,
  GetWebhooksResponse,
  UpdateWebHookRequest,
  UpdateWebhookResponse,
} from '../models/index';
import {
    CreateWebHookRequestFromJSON,
    CreateWebHookRequestToJSON,
    CreateWebhookResponseFromJSON,
    CreateWebhookResponseToJSON,
    DeleteWebhookResponseFromJSON,
    DeleteWebhookResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetEventResponseFromJSON,
    GetEventResponseToJSON,
    GetEventTypesResponseFromJSON,
    GetEventTypesResponseToJSON,
    GetWebhooksResponseFromJSON,
    GetWebhooksResponseToJSON,
    UpdateWebHookRequestFromJSON,
    UpdateWebHookRequestToJSON,
    UpdateWebhookResponseFromJSON,
    UpdateWebhookResponseToJSON,
} from '../models/index';

export interface CreateWebHookOperationRequest {
    createWebHookRequest: CreateWebHookRequest;
}

export interface DeleteWebHookRequest {
    webhookId: string;
}

export interface GetEventRequest {
    eventId: string;
}

export interface UpdateWebHookOperationRequest {
    updateWebHookRequest: UpdateWebHookRequest;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * Create a webhook 
     * Create a Webhook
     */
    async createWebHookRaw(requestParameters: CreateWebHookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateWebhookResponse>> {
        if (requestParameters['createWebHookRequest'] == null) {
            throw new runtime.RequiredError(
                'createWebHookRequest',
                'Required parameter "createWebHookRequest" was null or undefined when calling createWebHook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/webhooks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWebHookRequestToJSON(requestParameters['createWebHookRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateWebhookResponseFromJSON(jsonValue));
    }

    /**
     * Create a webhook 
     * Create a Webhook
     */
    async createWebHook(requestParameters: CreateWebHookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateWebhookResponse> {
        const response = await this.createWebHookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete webhook 
     * Delete Webhook
     */
    async deleteWebHookRaw(requestParameters: DeleteWebHookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteWebhookResponse>> {
        if (requestParameters['webhookId'] == null) {
            throw new runtime.RequiredError(
                'webhookId',
                'Required parameter "webhookId" was null or undefined when calling deleteWebHook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/webhooks/{webhook_id}`.replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters['webhookId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteWebhookResponseFromJSON(jsonValue));
    }

    /**
     * Delete webhook 
     * Delete Webhook
     */
    async deleteWebHook(requestParameters: DeleteWebHookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteWebhookResponse> {
        const response = await this.deleteWebHookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an event 
     * Get Event
     */
    async getEventRaw(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/events/{event_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEventResponseFromJSON(jsonValue));
    }

    /**
     * Returns an event 
     * Get Event
     */
    async getEvent(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventResponse> {
        const response = await this.getEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list event type definitions 
     * List Event Types
     */
    async getEventTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventTypesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/event_types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEventTypesResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list event type definitions 
     * List Event Types
     */
    async getEventTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventTypesResponse> {
        const response = await this.getEventTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * List webhooks 
     * List Webhooks
     */
    async getWebHooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWebhooksResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/webhooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWebhooksResponseFromJSON(jsonValue));
    }

    /**
     * List webhooks 
     * List Webhooks
     */
    async getWebHooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWebhooksResponse> {
        const response = await this.getWebHooksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a webhook 
     * Update a Webhook
     */
    async updateWebHookRaw(requestParameters: UpdateWebHookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateWebhookResponse>> {
        if (requestParameters['updateWebHookRequest'] == null) {
            throw new runtime.RequiredError(
                'updateWebHookRequest',
                'Required parameter "updateWebHookRequest" was null or undefined when calling updateWebHook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/webhooks`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWebHookRequestToJSON(requestParameters['updateWebHookRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateWebhookResponseFromJSON(jsonValue));
    }

    /**
     * Update a webhook 
     * Update a Webhook
     */
    async updateWebHook(requestParameters: UpdateWebHookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateWebhookResponse> {
        const response = await this.updateWebHookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
