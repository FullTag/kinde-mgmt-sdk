/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Connection,
  CreateConnectionRequest,
  CreateConnectionResponse,
  ErrorResponse,
  GetConnectionsResponse,
  SuccessResponse,
  UpdateConnectionRequest,
} from '../models/index';
import {
    ConnectionFromJSON,
    ConnectionToJSON,
    CreateConnectionRequestFromJSON,
    CreateConnectionRequestToJSON,
    CreateConnectionResponseFromJSON,
    CreateConnectionResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetConnectionsResponseFromJSON,
    GetConnectionsResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateConnectionRequestFromJSON,
    UpdateConnectionRequestToJSON,
} from '../models/index';

export interface CreateConnectionOperationRequest {
    createConnectionRequest: CreateConnectionRequest;
}

export interface GetConnectionRequest {
    connectionId: string;
}

export interface GetConnectionsRequest {
    pageSize?: number;
    startingAfter?: string;
    endingBefore?: string;
}

export interface UpdateConnectionOperationRequest {
    connectionId: string;
    updateConnectionRequest: UpdateConnectionRequest;
}

/**
 * 
 */
export class ConnectionsApi extends runtime.BaseAPI {

    /**
     * Create Connection.
     * Create Connection
     */
    async createConnectionRaw(requestParameters: CreateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateConnectionResponse>> {
        if (requestParameters['createConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'createConnectionRequest',
                'Required parameter "createConnectionRequest" was null or undefined when calling createConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/connections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateConnectionRequestToJSON(requestParameters['createConnectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateConnectionResponseFromJSON(jsonValue));
    }

    /**
     * Create Connection.
     * Create Connection
     */
    async createConnection(requestParameters: CreateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateConnectionResponse> {
        const response = await this.createConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Connection.
     * Get Connection
     */
    async getConnectionRaw(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>> {
        if (requestParameters['connectionId'] == null) {
            throw new runtime.RequiredError(
                'connectionId',
                'Required parameter "connectionId" was null or undefined when calling getConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/connections/{connection_id}`.replace(`{${"connection_id"}}`, encodeURIComponent(String(requestParameters['connectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionFromJSON(jsonValue));
    }

    /**
     * Get Connection.
     * Get Connection
     */
    async getConnection(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection> {
        const response = await this.getConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of Connections 
     * List Connections
     */
    async getConnectionsRaw(requestParameters: GetConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetConnectionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['endingBefore'] != null) {
            queryParameters['ending_before'] = requestParameters['endingBefore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/connections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetConnectionsResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of Connections 
     * List Connections
     */
    async getConnections(requestParameters: GetConnectionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetConnectionsResponse> {
        const response = await this.getConnectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Connection.
     * Update Connection
     */
    async updateConnectionRaw(requestParameters: UpdateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['connectionId'] == null) {
            throw new runtime.RequiredError(
                'connectionId',
                'Required parameter "connectionId" was null or undefined when calling updateConnection().'
            );
        }

        if (requestParameters['updateConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateConnectionRequest',
                'Required parameter "updateConnectionRequest" was null or undefined when calling updateConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/connections/{connection_id}`.replace(`{${"connection_id"}}`, encodeURIComponent(String(requestParameters['connectionId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateConnectionRequestToJSON(requestParameters['updateConnectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update Connection.
     * Update Connection
     */
    async updateConnection(requestParameters: UpdateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.updateConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
