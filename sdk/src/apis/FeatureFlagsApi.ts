/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFeatureFlagRequest,
  ErrorResponse,
  SuccessResponse,
} from '../models/index';
import {
    CreateFeatureFlagRequestFromJSON,
    CreateFeatureFlagRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface CreateFeatureFlagOperationRequest {
    createFeatureFlagRequest: CreateFeatureFlagRequest;
}

export interface DeleteFeatureFlagRequest {
    featureFlagKey: string;
}

export interface UpdateFeatureFlagRequest {
    featureFlagKey: string;
    name: string;
    description: string;
    type: UpdateFeatureFlagTypeEnum;
    allowOverrideLevel: UpdateFeatureFlagAllowOverrideLevelEnum;
    defaultValue: string;
}

/**
 * 
 */
export class FeatureFlagsApi extends runtime.BaseAPI {

    /**
     * Create feature flag.
     * Create Feature Flag
     */
    async createFeatureFlagRaw(requestParameters: CreateFeatureFlagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['createFeatureFlagRequest'] == null) {
            throw new runtime.RequiredError(
                'createFeatureFlagRequest',
                'Required parameter "createFeatureFlagRequest" was null or undefined when calling createFeatureFlag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/feature_flags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeatureFlagRequestToJSON(requestParameters['createFeatureFlagRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Create feature flag.
     * Create Feature Flag
     */
    async createFeatureFlag(requestParameters: CreateFeatureFlagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.createFeatureFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete feature flag
     * Delete Feature Flag
     */
    async deleteFeatureFlagRaw(requestParameters: DeleteFeatureFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['featureFlagKey'] == null) {
            throw new runtime.RequiredError(
                'featureFlagKey',
                'Required parameter "featureFlagKey" was null or undefined when calling deleteFeatureFlag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/feature_flags/{feature_flag_key}`.replace(`{${"feature_flag_key"}}`, encodeURIComponent(String(requestParameters['featureFlagKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete feature flag
     * Delete Feature Flag
     */
    async deleteFeatureFlag(requestParameters: DeleteFeatureFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteFeatureFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update feature flag.
     * Replace Feature Flag
     */
    async updateFeatureFlagRaw(requestParameters: UpdateFeatureFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['featureFlagKey'] == null) {
            throw new runtime.RequiredError(
                'featureFlagKey',
                'Required parameter "featureFlagKey" was null or undefined when calling updateFeatureFlag().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling updateFeatureFlag().'
            );
        }

        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling updateFeatureFlag().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling updateFeatureFlag().'
            );
        }

        if (requestParameters['allowOverrideLevel'] == null) {
            throw new runtime.RequiredError(
                'allowOverrideLevel',
                'Required parameter "allowOverrideLevel" was null or undefined when calling updateFeatureFlag().'
            );
        }

        if (requestParameters['defaultValue'] == null) {
            throw new runtime.RequiredError(
                'defaultValue',
                'Required parameter "defaultValue" was null or undefined when calling updateFeatureFlag().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['allowOverrideLevel'] != null) {
            queryParameters['allow_override_level'] = requestParameters['allowOverrideLevel'];
        }

        if (requestParameters['defaultValue'] != null) {
            queryParameters['default_value'] = requestParameters['defaultValue'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/feature_flags/{feature_flag_key}`.replace(`{${"feature_flag_key"}}`, encodeURIComponent(String(requestParameters['featureFlagKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update feature flag.
     * Replace Feature Flag
     */
    async updateFeatureFlag(requestParameters: UpdateFeatureFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.updateFeatureFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const UpdateFeatureFlagTypeEnum = {
    Str: 'str',
    Int: 'int',
    Bool: 'bool'
} as const;
export type UpdateFeatureFlagTypeEnum = typeof UpdateFeatureFlagTypeEnum[keyof typeof UpdateFeatureFlagTypeEnum];
/**
 * @export
 */
export const UpdateFeatureFlagAllowOverrideLevelEnum = {
    Env: 'env',
    Org: 'org'
} as const;
export type UpdateFeatureFlagAllowOverrideLevelEnum = typeof UpdateFeatureFlagAllowOverrideLevelEnum[keyof typeof UpdateFeatureFlagAllowOverrideLevelEnum];
