/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  Identity,
  SuccessResponse,
  UpdateIdentityRequest,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    IdentityFromJSON,
    IdentityToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateIdentityRequestFromJSON,
    UpdateIdentityRequestToJSON,
} from '../models/index';

export interface DeleteIdentityRequest {
    identityId: string;
}

export interface GetIdentityRequest {
    identityId: string;
}

export interface UpdateIdentityOperationRequest {
    identityId: string;
    updateIdentityRequest: UpdateIdentityRequest;
}

/**
 * 
 */
export class IdentitiesApi extends runtime.BaseAPI {

    /**
     * Delete identity by ID.
     * Delete identity
     */
    async deleteIdentityRaw(requestParameters: DeleteIdentityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['identityId'] == null) {
            throw new runtime.RequiredError(
                'identityId',
                'Required parameter "identityId" was null or undefined when calling deleteIdentity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/identities/{identity_id}`.replace(`{${"identity_id"}}`, encodeURIComponent(String(requestParameters['identityId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete identity by ID.
     * Delete identity
     */
    async deleteIdentity(requestParameters: DeleteIdentityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteIdentityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an identity by ID 
     * Get identity
     */
    async getIdentityRaw(requestParameters: GetIdentityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Identity>> {
        if (requestParameters['identityId'] == null) {
            throw new runtime.RequiredError(
                'identityId',
                'Required parameter "identityId" was null or undefined when calling getIdentity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/identities/{identity_id}`.replace(`{${"identity_id"}}`, encodeURIComponent(String(requestParameters['identityId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityFromJSON(jsonValue));
    }

    /**
     * Returns an identity by ID 
     * Get identity
     */
    async getIdentity(requestParameters: GetIdentityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Identity> {
        const response = await this.getIdentityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update identity by ID.
     * Update identity
     */
    async updateIdentityRaw(requestParameters: UpdateIdentityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['identityId'] == null) {
            throw new runtime.RequiredError(
                'identityId',
                'Required parameter "identityId" was null or undefined when calling updateIdentity().'
            );
        }

        if (requestParameters['updateIdentityRequest'] == null) {
            throw new runtime.RequiredError(
                'updateIdentityRequest',
                'Required parameter "updateIdentityRequest" was null or undefined when calling updateIdentity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/identities/{identity_id}`.replace(`{${"identity_id"}}`, encodeURIComponent(String(requestParameters['identityId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIdentityRequestToJSON(requestParameters['updateIdentityRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update identity by ID.
     * Update identity
     */
    async updateIdentity(requestParameters: UpdateIdentityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.updateIdentityRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
