/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddOrganizationUsersRequest,
  AddOrganizationUsersResponse,
  CreateOrganizationRequest,
  CreateOrganizationResponse,
  CreateOrganizationUserPermissionRequest,
  CreateOrganizationUserRoleRequest,
  ErrorResponse,
  GetOrganizationFeatureFlagsResponse,
  GetOrganizationUsersResponse,
  GetOrganizationsResponse,
  GetOrganizationsUserPermissionsResponse,
  GetOrganizationsUserRolesResponse,
  GetPropertyValuesResponse,
  Organization,
  SuccessResponse,
  UpdateOrganizationPropertiesRequest,
  UpdateOrganizationRequest,
  UpdateOrganizationUsersRequest,
  UpdateOrganizationUsersResponse,
} from '../models/index';
import {
    AddOrganizationUsersRequestFromJSON,
    AddOrganizationUsersRequestToJSON,
    AddOrganizationUsersResponseFromJSON,
    AddOrganizationUsersResponseToJSON,
    CreateOrganizationRequestFromJSON,
    CreateOrganizationRequestToJSON,
    CreateOrganizationResponseFromJSON,
    CreateOrganizationResponseToJSON,
    CreateOrganizationUserPermissionRequestFromJSON,
    CreateOrganizationUserPermissionRequestToJSON,
    CreateOrganizationUserRoleRequestFromJSON,
    CreateOrganizationUserRoleRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetOrganizationFeatureFlagsResponseFromJSON,
    GetOrganizationFeatureFlagsResponseToJSON,
    GetOrganizationUsersResponseFromJSON,
    GetOrganizationUsersResponseToJSON,
    GetOrganizationsResponseFromJSON,
    GetOrganizationsResponseToJSON,
    GetOrganizationsUserPermissionsResponseFromJSON,
    GetOrganizationsUserPermissionsResponseToJSON,
    GetOrganizationsUserRolesResponseFromJSON,
    GetOrganizationsUserRolesResponseToJSON,
    GetPropertyValuesResponseFromJSON,
    GetPropertyValuesResponseToJSON,
    OrganizationFromJSON,
    OrganizationToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateOrganizationPropertiesRequestFromJSON,
    UpdateOrganizationPropertiesRequestToJSON,
    UpdateOrganizationRequestFromJSON,
    UpdateOrganizationRequestToJSON,
    UpdateOrganizationUsersRequestFromJSON,
    UpdateOrganizationUsersRequestToJSON,
    UpdateOrganizationUsersResponseFromJSON,
    UpdateOrganizationUsersResponseToJSON,
} from '../models/index';

export interface AddOrganizationUsersOperationRequest {
    orgCode: string;
    addOrganizationUsersRequest?: AddOrganizationUsersRequest;
}

export interface CreateOrganizationOperationRequest {
    createOrganizationRequest: CreateOrganizationRequest;
}

export interface CreateOrganizationUserPermissionOperationRequest {
    orgCode: string;
    userId: string;
    createOrganizationUserPermissionRequest: CreateOrganizationUserPermissionRequest;
}

export interface CreateOrganizationUserRoleOperationRequest {
    orgCode: string;
    userId: string;
    createOrganizationUserRoleRequest: CreateOrganizationUserRoleRequest;
}

export interface DeleteOrganizationRequest {
    orgCode: string;
}

export interface DeleteOrganizationFeatureFlagOverrideRequest {
    orgCode: string;
    featureFlagKey: string;
}

export interface DeleteOrganizationFeatureFlagOverridesRequest {
    orgCode: string;
}

export interface DeleteOrganizationHandleRequest {
    orgCode: string;
}

export interface DeleteOrganizationUserPermissionRequest {
    orgCode: string;
    userId: string;
    permissionId: string;
}

export interface DeleteOrganizationUserRoleRequest {
    orgCode: string;
    userId: string;
    roleId: string;
}

export interface GetOrganizationRequest {
    code?: string;
}

export interface GetOrganizationFeatureFlagsRequest {
    orgCode: string;
}

export interface GetOrganizationPropertyValuesRequest {
    orgCode: string;
}

export interface GetOrganizationUserPermissionsRequest {
    orgCode: string;
    userId: string;
    expand?: string | null;
}

export interface GetOrganizationUserRolesRequest {
    orgCode: string;
    userId: string;
}

export interface GetOrganizationUsersRequest {
    orgCode: string;
    sort?: GetOrganizationUsersSortEnum;
    pageSize?: number | null;
    nextToken?: string | null;
    permissions?: string;
    roles?: string;
}

export interface GetOrganizationsRequest {
    sort?: GetOrganizationsSortEnum;
    pageSize?: number | null;
    nextToken?: string | null;
}

export interface RemoveOrganizationUserRequest {
    orgCode: string;
    userId: string;
}

export interface UpdateOrganizationOperationRequest {
    orgCode: string;
    updateOrganizationRequest?: UpdateOrganizationRequest;
}

export interface UpdateOrganizationFeatureFlagOverrideRequest {
    orgCode: string;
    featureFlagKey: string;
    value: string;
}

export interface UpdateOrganizationPropertiesOperationRequest {
    orgCode: string;
    updateOrganizationPropertiesRequest: UpdateOrganizationPropertiesRequest;
}

export interface UpdateOrganizationPropertyRequest {
    orgCode: string;
    propertyKey: string;
    value: string;
}

export interface UpdateOrganizationUsersOperationRequest {
    orgCode: string;
    updateOrganizationUsersRequest?: UpdateOrganizationUsersRequest;
}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI {

    /**
     * Add existing users to an organization.
     * Add Organization Users
     */
    async addOrganizationUsersRaw(requestParameters: AddOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrganizationUsersResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling addOrganizationUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOrganizationUsersRequestToJSON(requestParameters['addOrganizationUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddOrganizationUsersResponseFromJSON(jsonValue));
    }

    /**
     * Add existing users to an organization.
     * Add Organization Users
     */
    async addOrganizationUsers(requestParameters: AddOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrganizationUsersResponse | null | undefined > {
        const response = await this.addOrganizationUsersRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Create an organization.
     * Create Organization
     */
    async createOrganizationRaw(requestParameters: CreateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrganizationResponse>> {
        if (requestParameters['createOrganizationRequest'] == null) {
            throw new runtime.RequiredError(
                'createOrganizationRequest',
                'Required parameter "createOrganizationRequest" was null or undefined when calling createOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationRequestToJSON(requestParameters['createOrganizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrganizationResponseFromJSON(jsonValue));
    }

    /**
     * Create an organization.
     * Create Organization
     */
    async createOrganization(requestParameters: CreateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrganizationResponse> {
        const response = await this.createOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add permission to an organization user.
     * Add Organization User Permission
     */
    async createOrganizationUserPermissionRaw(requestParameters: CreateOrganizationUserPermissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling createOrganizationUserPermission().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createOrganizationUserPermission().'
            );
        }

        if (requestParameters['createOrganizationUserPermissionRequest'] == null) {
            throw new runtime.RequiredError(
                'createOrganizationUserPermissionRequest',
                'Required parameter "createOrganizationUserPermissionRequest" was null or undefined when calling createOrganizationUserPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/permissions`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationUserPermissionRequestToJSON(requestParameters['createOrganizationUserPermissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Add permission to an organization user.
     * Add Organization User Permission
     */
    async createOrganizationUserPermission(requestParameters: CreateOrganizationUserPermissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.createOrganizationUserPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add role to an organization user.
     * Add Organization User Role
     */
    async createOrganizationUserRoleRaw(requestParameters: CreateOrganizationUserRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling createOrganizationUserRole().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createOrganizationUserRole().'
            );
        }

        if (requestParameters['createOrganizationUserRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'createOrganizationUserRoleRequest',
                'Required parameter "createOrganizationUserRoleRequest" was null or undefined when calling createOrganizationUserRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/roles`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationUserRoleRequestToJSON(requestParameters['createOrganizationUserRoleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Add role to an organization user.
     * Add Organization User Role
     */
    async createOrganizationUserRole(requestParameters: CreateOrganizationUserRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.createOrganizationUserRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an organization.
     * Delete Organization
     */
    async deleteOrganizationRaw(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling deleteOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{org_code}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an organization.
     * Delete Organization
     */
    async deleteOrganization(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     * Delete organization feature flag override.
     * Delete Organization Feature Flag Override
     */
    async deleteOrganizationFeatureFlagOverrideRaw(requestParameters: DeleteOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling deleteOrganizationFeatureFlagOverride().'
            );
        }

        if (requestParameters['featureFlagKey'] == null) {
            throw new runtime.RequiredError(
                'featureFlagKey',
                'Required parameter "featureFlagKey" was null or undefined when calling deleteOrganizationFeatureFlagOverride().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))).replace(`{${"feature_flag_key"}}`, encodeURIComponent(String(requestParameters['featureFlagKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete organization feature flag override.
     * Delete Organization Feature Flag Override
     */
    async deleteOrganizationFeatureFlagOverride(requestParameters: DeleteOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteOrganizationFeatureFlagOverrideRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete all organization feature flag overrides.
     * Delete Organization Feature Flag Overrides
     */
    async deleteOrganizationFeatureFlagOverridesRaw(requestParameters: DeleteOrganizationFeatureFlagOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling deleteOrganizationFeatureFlagOverrides().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/feature_flags`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete all organization feature flag overrides.
     * Delete Organization Feature Flag Overrides
     */
    async deleteOrganizationFeatureFlagOverrides(requestParameters: DeleteOrganizationFeatureFlagOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteOrganizationFeatureFlagOverridesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete organization handle 
     * Delete organization handle
     */
    async deleteOrganizationHandleRaw(requestParameters: DeleteOrganizationHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling deleteOrganizationHandle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{org_code}/handle`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete organization handle 
     * Delete organization handle
     */
    async deleteOrganizationHandle(requestParameters: DeleteOrganizationHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteOrganizationHandleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete permission for an organization user.
     * Delete Organization User Permission
     */
    async deleteOrganizationUserPermissionRaw(requestParameters: DeleteOrganizationUserPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling deleteOrganizationUserPermission().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteOrganizationUserPermission().'
            );
        }

        if (requestParameters['permissionId'] == null) {
            throw new runtime.RequiredError(
                'permissionId',
                'Required parameter "permissionId" was null or undefined when calling deleteOrganizationUserPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"permission_id"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete permission for an organization user.
     * Delete Organization User Permission
     */
    async deleteOrganizationUserPermission(requestParameters: DeleteOrganizationUserPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteOrganizationUserPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete role for an organization user.
     * Delete Organization User Role
     */
    async deleteOrganizationUserRoleRaw(requestParameters: DeleteOrganizationUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling deleteOrganizationUserRole().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteOrganizationUserRole().'
            );
        }

        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling deleteOrganizationUserRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete role for an organization user.
     * Delete Organization User Role
     */
    async deleteOrganizationUserRole(requestParameters: DeleteOrganizationUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteOrganizationUserRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an organization given the organization\'s code. 
     * Get Organization
     */
    async getOrganizationRaw(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Gets an organization given the organization\'s code. 
     * Get Organization
     */
    async getOrganization(requestParameters: GetOrganizationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.getOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all organization feature flags.
     * List Organization Feature Flags
     */
    async getOrganizationFeatureFlagsRaw(requestParameters: GetOrganizationFeatureFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationFeatureFlagsResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling getOrganizationFeatureFlags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/feature_flags`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationFeatureFlagsResponseFromJSON(jsonValue));
    }

    /**
     * Get all organization feature flags.
     * List Organization Feature Flags
     */
    async getOrganizationFeatureFlags(requestParameters: GetOrganizationFeatureFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationFeatureFlagsResponse> {
        const response = await this.getOrganizationFeatureFlagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets properties for an organization by org code. 
     * Get Organization Property Values
     */
    async getOrganizationPropertyValuesRaw(requestParameters: GetOrganizationPropertyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPropertyValuesResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling getOrganizationPropertyValues().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/properties`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPropertyValuesResponseFromJSON(jsonValue));
    }

    /**
     * Gets properties for an organization by org code. 
     * Get Organization Property Values
     */
    async getOrganizationPropertyValues(requestParameters: GetOrganizationPropertyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPropertyValuesResponse> {
        const response = await this.getOrganizationPropertyValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get permissions for an organization user.
     * List Organization User Permissions
     */
    async getOrganizationUserPermissionsRaw(requestParameters: GetOrganizationUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationsUserPermissionsResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling getOrganizationUserPermissions().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getOrganizationUserPermissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/permissions`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationsUserPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Get permissions for an organization user.
     * List Organization User Permissions
     */
    async getOrganizationUserPermissions(requestParameters: GetOrganizationUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationsUserPermissionsResponse> {
        const response = await this.getOrganizationUserPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get roles for an organization user.
     * List Organization User Roles
     */
    async getOrganizationUserRolesRaw(requestParameters: GetOrganizationUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationsUserRolesResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling getOrganizationUserRoles().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getOrganizationUserRoles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}/roles`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationsUserRolesResponseFromJSON(jsonValue));
    }

    /**
     * Get roles for an organization user.
     * List Organization User Roles
     */
    async getOrganizationUserRoles(requestParameters: GetOrganizationUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationsUserRolesResponse> {
        const response = await this.getOrganizationUserRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get users in an organization.
     * List Organization Users
     */
    async getOrganizationUsersRaw(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationUsersResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling getOrganizationUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['nextToken'] != null) {
            queryParameters['next_token'] = requestParameters['nextToken'];
        }

        if (requestParameters['permissions'] != null) {
            queryParameters['permissions'] = requestParameters['permissions'];
        }

        if (requestParameters['roles'] != null) {
            queryParameters['roles'] = requestParameters['roles'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationUsersResponseFromJSON(jsonValue));
    }

    /**
     * Get users in an organization.
     * List Organization Users
     */
    async getOrganizationUsers(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationUsersResponse> {
        const response = await this.getOrganizationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of organizations. 
     * List Organizations
     */
    async getOrganizationsRaw(requestParameters: GetOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['nextToken'] != null) {
            queryParameters['next_token'] = requestParameters['nextToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of organizations. 
     * List Organizations
     */
    async getOrganizations(requestParameters: GetOrganizationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationsResponse> {
        const response = await this.getOrganizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove user from an organization.
     * Remove Organization User
     */
    async removeOrganizationUserRaw(requestParameters: RemoveOrganizationUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling removeOrganizationUser().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeOrganizationUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove user from an organization.
     * Remove Organization User
     */
    async removeOrganizationUser(requestParameters: RemoveOrganizationUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.removeOrganizationUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an organization.
     * Update Organization
     */
    async updateOrganizationRaw(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling updateOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{org_code}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationRequestToJSON(requestParameters['updateOrganizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update an organization.
     * Update Organization
     */
    async updateOrganization(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.updateOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update organization feature flag override.
     * Update Organization Feature Flag Override
     */
    async updateOrganizationFeatureFlagOverrideRaw(requestParameters: UpdateOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling updateOrganizationFeatureFlagOverride().'
            );
        }

        if (requestParameters['featureFlagKey'] == null) {
            throw new runtime.RequiredError(
                'featureFlagKey',
                'Required parameter "featureFlagKey" was null or undefined when calling updateOrganizationFeatureFlagOverride().'
            );
        }

        if (requestParameters['value'] == null) {
            throw new runtime.RequiredError(
                'value',
                'Required parameter "value" was null or undefined when calling updateOrganizationFeatureFlagOverride().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['value'] != null) {
            queryParameters['value'] = requestParameters['value'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))).replace(`{${"feature_flag_key"}}`, encodeURIComponent(String(requestParameters['featureFlagKey']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update organization feature flag override.
     * Update Organization Feature Flag Override
     */
    async updateOrganizationFeatureFlagOverride(requestParameters: UpdateOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.updateOrganizationFeatureFlagOverrideRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update organization property values.
     * Update Organization Property values
     */
    async updateOrganizationPropertiesRaw(requestParameters: UpdateOrganizationPropertiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling updateOrganizationProperties().'
            );
        }

        if (requestParameters['updateOrganizationPropertiesRequest'] == null) {
            throw new runtime.RequiredError(
                'updateOrganizationPropertiesRequest',
                'Required parameter "updateOrganizationPropertiesRequest" was null or undefined when calling updateOrganizationProperties().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/properties`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationPropertiesRequestToJSON(requestParameters['updateOrganizationPropertiesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update organization property values.
     * Update Organization Property values
     */
    async updateOrganizationProperties(requestParameters: UpdateOrganizationPropertiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.updateOrganizationPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update organization property value.
     * Update Organization Property value
     */
    async updateOrganizationPropertyRaw(requestParameters: UpdateOrganizationPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling updateOrganizationProperty().'
            );
        }

        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling updateOrganizationProperty().'
            );
        }

        if (requestParameters['value'] == null) {
            throw new runtime.RequiredError(
                'value',
                'Required parameter "value" was null or undefined when calling updateOrganizationProperty().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['value'] != null) {
            queryParameters['value'] = requestParameters['value'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/properties/{property_key}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))).replace(`{${"property_key"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update organization property value.
     * Update Organization Property value
     */
    async updateOrganizationProperty(requestParameters: UpdateOrganizationPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.updateOrganizationPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update users that belong to an organization.
     * Update Organization Users
     */
    async updateOrganizationUsersRaw(requestParameters: UpdateOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOrganizationUsersResponse>> {
        if (requestParameters['orgCode'] == null) {
            throw new runtime.RequiredError(
                'orgCode',
                'Required parameter "orgCode" was null or undefined when calling updateOrganizationUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters['orgCode']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationUsersRequestToJSON(requestParameters['updateOrganizationUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateOrganizationUsersResponseFromJSON(jsonValue));
    }

    /**
     * Update users that belong to an organization.
     * Update Organization Users
     */
    async updateOrganizationUsers(requestParameters: UpdateOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOrganizationUsersResponse> {
        const response = await this.updateOrganizationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetOrganizationUsersSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    EmailAsc: 'email_asc',
    EmailDesc: 'email_desc',
    IdAsc: 'id_asc',
    IdDesc: 'id_desc'
} as const;
export type GetOrganizationUsersSortEnum = typeof GetOrganizationUsersSortEnum[keyof typeof GetOrganizationUsersSortEnum];
/**
 * @export
 */
export const GetOrganizationsSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    EmailAsc: 'email_asc',
    EmailDesc: 'email_desc'
} as const;
export type GetOrganizationsSortEnum = typeof GetOrganizationsSortEnum[keyof typeof GetOrganizationsSortEnum];
